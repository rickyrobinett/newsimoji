import { EnumerationParameterType, ParameterBody, ParameterLocation, ParameterType, RegexParameterType, ResponseSchema, StringParameterType } from './types';
export declare class BaseParameter {
    static isParameter: boolean;
    isParameter: boolean;
    type: string;
    params: ParameterType;
    generated: boolean;
    constructor(params?: ParameterType);
    getValue(): Record<string, any>;
    validate(value: any): any;
}
export declare class Arr extends BaseParameter {
    isArr: boolean;
    private innerType;
    constructor(innerType: any, params?: ParameterType);
    validate(value: any): any;
    getValue(): {
        type: string;
        items: any;
        description: string | undefined;
        example: string | number | boolean | undefined;
        default: string | number | boolean | undefined;
    };
}
export declare class Obj extends BaseParameter {
    isObj: boolean;
    private fields;
    constructor(fields: Record<string, BaseParameter>, params?: ParameterType);
    validate(value: any): any;
    getValue(): Record<string, any>;
}
export declare class Num extends BaseParameter {
    type: string;
    validate(value: any): any;
}
export declare class Int extends Num {
    type: string;
    validate(value: any): any;
}
export declare class Str extends BaseParameter {
    type: string;
    params: StringParameterType;
    constructor(params?: StringParameterType);
    validate(value: any): any;
    getValue(): {
        format: string | undefined;
    };
}
export declare class DateTime extends Str {
    type: string;
    params: StringParameterType;
    constructor(params?: StringParameterType);
}
export declare class Regex extends Str {
    type: string;
    params: RegexParameterType;
    constructor(params: RegexParameterType);
    validate(value: any): any;
    getValue(): {
        pattern: string;
        format: string | undefined;
    };
}
export declare class Email extends Regex {
    type: string;
    params: RegexParameterType;
    constructor(params?: StringParameterType);
}
export declare class Uuid extends Regex {
    type: string;
    params: RegexParameterType;
    constructor(params?: StringParameterType);
}
export declare class Hostname extends Regex {
    type: string;
    params: RegexParameterType;
    constructor(params?: StringParameterType);
}
export declare class Ipv4 extends Regex {
    type: string;
    params: RegexParameterType;
    constructor(params?: StringParameterType);
}
export declare class Ipv6 extends Regex {
    type: string;
    params: RegexParameterType;
    constructor(params?: StringParameterType);
}
export declare class DateOnly extends Str {
    type: string;
    params: StringParameterType;
    constructor(params?: StringParameterType);
}
export declare class Bool extends Str {
    type: string;
    private validValues;
    validate(value: any): any;
}
export declare class Enumeration extends Str {
    isEnum: boolean;
    params: EnumerationParameterType;
    values: Record<string, any>;
    keys: any;
    constructor(params: EnumerationParameterType);
    validate(value: any): any;
    getValue(): {
        enum: any;
        format: string | undefined;
    };
}
export declare class Parameter {
    location: string;
    private rawType;
    type: BaseParameter;
    params: ParameterLocation;
    constructor(location: string, rawType: any, params: ParameterLocation);
    getType(type: any, params: ParameterLocation): any;
    getValue(): Record<string, any>;
    validate(value: any): any;
}
export declare class Body extends Parameter {
    paramsBody: ParameterBody;
    constructor(rawType: any, params?: ParameterBody);
    getValue(): Record<string, any>;
}
export declare class Resp extends Parameter {
    constructor(rawType: any, params: ResponseSchema);
    getValue(): Record<string, any>;
}
export declare function Query(type: any, params?: ParameterLocation): Parameter;
export declare function Path(type: any, params?: ParameterLocation): Parameter;
export declare function Header(type: any, params?: ParameterLocation): Parameter;
export declare function Cookie(type: any, params?: ParameterLocation): Parameter;
export declare function extractParameter(request: Request, query: Record<string, any>, name: string, location: string): any;
export declare function extractQueryParameters(request: Request): Record<string, any>;
export declare function Required(param: Parameter): Parameter;
export declare function removeUndefinedFields(obj: Record<string, any>): Record<string, any>;
export declare function getFormatedParameters(params: Record<string, Parameter> | Parameter[]): {
    name: string;
}[];
